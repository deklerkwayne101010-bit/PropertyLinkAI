{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { storeToken, removeStoredToken } from '../../utils/auth';\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  loading: false,\n  error: null,\n  initialized: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    initializeAuth: (state, action) => {\n      if (action.payload) {\n        state.user = action.payload.user;\n        state.token = action.payload.token;\n        state.isAuthenticated = true;\n      }\n      state.initialized = true;\n      state.loading = false;\n    },\n    loginStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isAuthenticated = true;\n      state.loading = false;\n      state.error = null;\n      // Store token in localStorage\n      storeToken(action.payload.token);\n    },\n    loginFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n      state.loading = false;\n      state.error = null;\n      // Remove token from localStorage\n      removeStoredToken();\n    },\n    registerStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isAuthenticated = true;\n      state.loading = false;\n      state.error = null;\n      // Store token in localStorage\n      storeToken(action.payload.token);\n    },\n    registerFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","storeToken","removeStoredToken","initialState","user","token","isAuthenticated","loading","error","initialized","authSlice","name","reducers","initializeAuth","state","action","payload","loginStart","loginSuccess","loginFailure","logout","registerStart","registerSuccess","registerFailure","setLoading","actions","reducer"],"sources":["c:/Users/owner/OneDrive - Process Steel/Documents/GitHub/bolt.diy/tasklink-sa-frontend/src/store/slices/authSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { storeToken, removeStoredToken } from '../../utils/auth';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: 'task_poster' | 'task_doer';\r\n}\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  error: string | null;\r\n  initialized: boolean;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  loading: false,\r\n  error: null,\r\n  initialized: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    initializeAuth: (state, action: PayloadAction<{ user: User; token: string } | null>) => {\r\n      if (action.payload) {\r\n        state.user = action.payload.user;\r\n        state.token = action.payload.token;\r\n        state.isAuthenticated = true;\r\n      }\r\n      state.initialized = true;\r\n      state.loading = false;\r\n    },\r\n    loginStart: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    loginSuccess: (state, action: PayloadAction<{ user: User; token: string }>) => {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isAuthenticated = true;\r\n      state.loading = false;\r\n      state.error = null;\r\n      // Store token in localStorage\r\n      storeToken(action.payload.token);\r\n    },\r\n    loginFailure: (state, action: PayloadAction<string>) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n      state.token = null;\r\n      state.isAuthenticated = false;\r\n      state.loading = false;\r\n      state.error = null;\r\n      // Remove token from localStorage\r\n      removeStoredToken();\r\n    },\r\n    registerStart: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    registerSuccess: (state, action: PayloadAction<{ user: User; token: string }>) => {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isAuthenticated = true;\r\n      state.loading = false;\r\n      state.error = null;\r\n      // Store token in localStorage\r\n      storeToken(action.payload.token);\r\n    },\r\n    registerFailure: (state, action: PayloadAction<string>) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  loginStart,\r\n  loginSuccess,\r\n  loginFailure,\r\n  logout,\r\n  registerStart,\r\n  registerSuccess,\r\n  registerFailure,\r\n} = authSlice.actions;\r\n\r\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}