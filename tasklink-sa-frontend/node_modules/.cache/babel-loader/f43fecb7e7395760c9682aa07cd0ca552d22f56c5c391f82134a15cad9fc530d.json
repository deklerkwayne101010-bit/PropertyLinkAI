{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\owner\\\\OneDrive - Process Steel\\\\Documents\\\\GitHub\\\\bolt.diy\\\\tasklink-sa-frontend\\\\src\\\\components\\\\Auth\\\\PublicRoute.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { CircularProgress, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PublicRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    loading\n  } = useSelector(state => state.auth);\n  const location = useLocation();\n\n  // Show loading spinner while checking authentication\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"100vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If authenticated, redirect to dashboard or the intended location\n  if (isAuthenticated) {\n    var _location$state, _location$state$from;\n    // Check if there's a redirect location from a private route\n    const from = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : (_location$state$from = _location$state.from) === null || _location$state$from === void 0 ? void 0 : _location$state$from.pathname) || '/dashboard';\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: from,\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If not authenticated, render the public component (login/register pages)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(PublicRoute, \"fOayQyXlEEr8ek2aWeMP53aUQPs=\", false, function () {\n  return [useSelector, useLocation];\n});\n_c = PublicRoute;\nexport default PublicRoute;\nvar _c;\n$RefreshReg$(_c, \"PublicRoute\");","map":{"version":3,"names":["React","useSelector","Navigate","useLocation","CircularProgress","Box","jsxDEV","_jsxDEV","Fragment","_Fragment","PublicRoute","children","_s","isAuthenticated","loading","state","auth","location","display","justifyContent","alignItems","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","_location$state","_location$state$from","from","pathname","to","replace","_c","$RefreshReg$"],"sources":["c:/Users/owner/OneDrive - Process Steel/Documents/GitHub/bolt.diy/tasklink-sa-frontend/src/components/Auth/PublicRoute.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { RootState } from '../../store/store';\r\nimport { CircularProgress, Box } from '@mui/material';\r\n\r\ninterface PublicRouteProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst PublicRoute: React.FC<PublicRouteProps> = ({ children }) => {\r\n  const { isAuthenticated, loading } = useSelector((state: RootState) => state.auth);\r\n  const location = useLocation();\r\n\r\n  // Show loading spinner while checking authentication\r\n  if (loading) {\r\n    return (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        minHeight=\"100vh\"\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // If authenticated, redirect to dashboard or the intended location\r\n  if (isAuthenticated) {\r\n    // Check if there's a redirect location from a private route\r\n    const from = location.state?.from?.pathname || '/dashboard';\r\n    return <Navigate to={from} replace />;\r\n  }\r\n\r\n  // If not authenticated, render the public component (login/register pages)\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default PublicRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AAExD,SAASC,gBAAgB,EAAEC,GAAG,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAMtD,MAAMC,WAAuC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChE,MAAM;IAAEC,eAAe;IAAEC;EAAQ,CAAC,GAAGb,WAAW,CAAEc,KAAgB,IAAKA,KAAK,CAACC,IAAI,CAAC;EAClF,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIW,OAAO,EAAE;IACX,oBACEP,OAAA,CAACF,GAAG;MACFa,OAAO,EAAC,MAAM;MACdC,cAAc,EAAC,QAAQ;MACvBC,UAAU,EAAC,QAAQ;MACnBC,SAAS,EAAC,OAAO;MAAAV,QAAA,eAEjBJ,OAAA,CAACH,gBAAgB;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAEV;;EAEA;EACA,IAAIZ,eAAe,EAAE;IAAA,IAAAa,eAAA,EAAAC,oBAAA;IACnB;IACA,MAAMC,IAAI,GAAG,EAAAF,eAAA,GAAAT,QAAQ,CAACF,KAAK,cAAAW,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBE,IAAI,cAAAD,oBAAA,uBAApBA,oBAAA,CAAsBE,QAAQ,KAAI,YAAY;IAC3D,oBAAOtB,OAAA,CAACL,QAAQ;MAAC4B,EAAE,EAAEF,IAAK;MAACG,OAAO;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACvC;;EAEA;EACA,oBAAOlB,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACC,EAAA,CA3BIF,WAAuC;EAAA,QACNT,WAAW,EAC/BE,WAAW;AAAA;AAAA6B,EAAA,GAFxBtB,WAAuC;AA6B7C,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}