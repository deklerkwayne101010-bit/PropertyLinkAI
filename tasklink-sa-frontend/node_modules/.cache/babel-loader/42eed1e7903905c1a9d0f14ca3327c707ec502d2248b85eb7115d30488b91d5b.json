{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  notifications: [],\n  unreadCount: 0\n};\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n      if (!action.payload.read) {\n        state.unreadCount += 1;\n      }\n    },\n    markAsRead: (state, action) => {\n      const notification = state.notifications.find(n => n.id === action.payload);\n      if (notification && !notification.read) {\n        notification.read = true;\n        state.unreadCount -= 1;\n      }\n    },\n    markAllAsRead: state => {\n      state.notifications.forEach(notification => {\n        notification.read = true;\n      });\n      state.unreadCount = 0;\n    },\n    clearNotifications: state => {\n      state.notifications = [];\n      state.unreadCount = 0;\n    }\n  }\n});\nexport const {\n  addNotification,\n  markAsRead,\n  markAllAsRead,\n  clearNotifications\n} = notificationsSlice.actions;\nexport default notificationsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","notifications","unreadCount","notificationsSlice","name","reducers","addNotification","state","action","unshift","payload","read","markAsRead","notification","find","n","id","markAllAsRead","forEach","clearNotifications","actions","reducer"],"sources":["c:/Users/owner/OneDrive - Process Steel/Documents/GitHub/bolt.diy/tasklink-sa-frontend/src/store/slices/notificationsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  title: string;\r\n  message: string;\r\n  read: boolean;\r\n  timestamp: string;\r\n}\r\n\r\ninterface NotificationsState {\r\n  notifications: Notification[];\r\n  unreadCount: number;\r\n}\r\n\r\nconst initialState: NotificationsState = {\r\n  notifications: [],\r\n  unreadCount: 0,\r\n};\r\n\r\nconst notificationsSlice = createSlice({\r\n  name: 'notifications',\r\n  initialState,\r\n  reducers: {\r\n    addNotification: (state, action: PayloadAction<Notification>) => {\r\n      state.notifications.unshift(action.payload);\r\n      if (!action.payload.read) {\r\n        state.unreadCount += 1;\r\n      }\r\n    },\r\n    markAsRead: (state, action: PayloadAction<string>) => {\r\n      const notification = state.notifications.find(n => n.id === action.payload);\r\n      if (notification && !notification.read) {\r\n        notification.read = true;\r\n        state.unreadCount -= 1;\r\n      }\r\n    },\r\n    markAllAsRead: (state) => {\r\n      state.notifications.forEach(notification => {\r\n        notification.read = true;\r\n      });\r\n      state.unreadCount = 0;\r\n    },\r\n    clearNotifications: (state) => {\r\n      state.notifications = [];\r\n      state.unreadCount = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addNotification, markAsRead, markAllAsRead, clearNotifications } = notificationsSlice.actions;\r\nexport default notificationsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAgB7D,MAAMC,YAAgC,GAAG;EACvCC,aAAa,EAAE,EAAE;EACjBC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,kBAAkB,GAAGJ,WAAW,CAAC;EACrCK,IAAI,EAAE,eAAe;EACrBJ,YAAY;EACZK,QAAQ,EAAE;IACRC,eAAe,EAAEA,CAACC,KAAK,EAAEC,MAAmC,KAAK;MAC/DD,KAAK,CAACN,aAAa,CAACQ,OAAO,CAACD,MAAM,CAACE,OAAO,CAAC;MAC3C,IAAI,CAACF,MAAM,CAACE,OAAO,CAACC,IAAI,EAAE;QACxBJ,KAAK,CAACL,WAAW,IAAI,CAAC;MACxB;IACF,CAAC;IACDU,UAAU,EAAEA,CAACL,KAAK,EAAEC,MAA6B,KAAK;MACpD,MAAMK,YAAY,GAAGN,KAAK,CAACN,aAAa,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKR,MAAM,CAACE,OAAO,CAAC;MAC3E,IAAIG,YAAY,IAAI,CAACA,YAAY,CAACF,IAAI,EAAE;QACtCE,YAAY,CAACF,IAAI,GAAG,IAAI;QACxBJ,KAAK,CAACL,WAAW,IAAI,CAAC;MACxB;IACF,CAAC;IACDe,aAAa,EAAGV,KAAK,IAAK;MACxBA,KAAK,CAACN,aAAa,CAACiB,OAAO,CAACL,YAAY,IAAI;QAC1CA,YAAY,CAACF,IAAI,GAAG,IAAI;MAC1B,CAAC,CAAC;MACFJ,KAAK,CAACL,WAAW,GAAG,CAAC;IACvB,CAAC;IACDiB,kBAAkB,EAAGZ,KAAK,IAAK;MAC7BA,KAAK,CAACN,aAAa,GAAG,EAAE;MACxBM,KAAK,CAACL,WAAW,GAAG,CAAC;IACvB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,eAAe;EAAEM,UAAU;EAAEK,aAAa;EAAEE;AAAmB,CAAC,GAAGhB,kBAAkB,CAACiB,OAAO;AAC5G,eAAejB,kBAAkB,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}