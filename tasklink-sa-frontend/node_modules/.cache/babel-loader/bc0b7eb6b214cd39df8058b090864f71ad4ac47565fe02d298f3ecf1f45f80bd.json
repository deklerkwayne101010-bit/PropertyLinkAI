{"ast":null,"code":"import { store } from '../store/store';\nimport { logout } from '../store/slices/authSlice';\n\n// JWT token validation utility\nexport const isTokenExpired = token => {\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const currentTime = Date.now() / 1000;\n    return payload.exp < currentTime;\n  } catch (error) {\n    // If token is malformed, consider it expired\n    return true;\n  }\n};\n\n// Check if user is authenticated and token is valid\nexport const checkAuthStatus = () => {\n  const state = store.getState();\n  const {\n    token,\n    isAuthenticated\n  } = state.auth;\n  if (!isAuthenticated || !token) {\n    return false;\n  }\n\n  // Check if token is expired\n  if (isTokenExpired(token)) {\n    // Auto logout if token is expired\n    store.dispatch(logout());\n    return false;\n  }\n  return true;\n};\n\n// Get stored token from localStorage (if needed for persistence)\nexport const getStoredToken = () => {\n  return localStorage.getItem('authToken');\n};\n\n// Store token in localStorage\nexport const storeToken = token => {\n  localStorage.setItem('authToken', token);\n};\n\n// Remove token from localStorage\nexport const removeStoredToken = () => {\n  localStorage.removeItem('authToken');\n};\n\n// Initialize auth state from localStorage on app startup\nexport const initializeAuth = () => {\n  const token = getStoredToken();\n  if (token && !isTokenExpired(token)) {\n    // Token exists and is valid - you might want to validate with server\n    // For now, we'll trust the local token\n    // In a production app, you might want to call an API to refresh/validate\n  } else if (token && isTokenExpired(token)) {\n    // Token exists but is expired - clean up\n    removeStoredToken();\n  }\n};","map":{"version":3,"names":["store","logout","isTokenExpired","token","payload","JSON","parse","atob","split","currentTime","Date","now","exp","error","checkAuthStatus","state","getState","isAuthenticated","auth","dispatch","getStoredToken","localStorage","getItem","storeToken","setItem","removeStoredToken","removeItem","initializeAuth"],"sources":["c:/Users/owner/OneDrive - Process Steel/Documents/GitHub/bolt.diy/tasklink-sa-frontend/src/utils/auth.ts"],"sourcesContent":["import { store } from '../store/store';\r\nimport { logout } from '../store/slices/authSlice';\r\n\r\n// JWT token validation utility\r\nexport const isTokenExpired = (token: string): boolean => {\r\n  try {\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    const currentTime = Date.now() / 1000;\r\n    return payload.exp < currentTime;\r\n  } catch (error) {\r\n    // If token is malformed, consider it expired\r\n    return true;\r\n  }\r\n};\r\n\r\n// Check if user is authenticated and token is valid\r\nexport const checkAuthStatus = (): boolean => {\r\n  const state = store.getState();\r\n  const { token, isAuthenticated } = state.auth;\r\n\r\n  if (!isAuthenticated || !token) {\r\n    return false;\r\n  }\r\n\r\n  // Check if token is expired\r\n  if (isTokenExpired(token)) {\r\n    // Auto logout if token is expired\r\n    store.dispatch(logout());\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// Get stored token from localStorage (if needed for persistence)\r\nexport const getStoredToken = (): string | null => {\r\n  return localStorage.getItem('authToken');\r\n};\r\n\r\n// Store token in localStorage\r\nexport const storeToken = (token: string): void => {\r\n  localStorage.setItem('authToken', token);\r\n};\r\n\r\n// Remove token from localStorage\r\nexport const removeStoredToken = (): void => {\r\n  localStorage.removeItem('authToken');\r\n};\r\n\r\n// Initialize auth state from localStorage on app startup\r\nexport const initializeAuth = (): void => {\r\n  const token = getStoredToken();\r\n  if (token && !isTokenExpired(token)) {\r\n    // Token exists and is valid - you might want to validate with server\r\n    // For now, we'll trust the local token\r\n    // In a production app, you might want to call an API to refresh/validate\r\n  } else if (token && isTokenExpired(token)) {\r\n    // Token exists but is expired - clean up\r\n    removeStoredToken();\r\n  }\r\n};"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,MAAM,QAAQ,2BAA2B;;AAElD;AACA,OAAO,MAAMC,cAAc,GAAIC,KAAa,IAAc;EACxD,IAAI;IACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,OAAOP,OAAO,CAACQ,GAAG,GAAGH,WAAW;EAClC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACA,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAe;EAC5C,MAAMC,KAAK,GAAGf,KAAK,CAACgB,QAAQ,CAAC,CAAC;EAC9B,MAAM;IAAEb,KAAK;IAAEc;EAAgB,CAAC,GAAGF,KAAK,CAACG,IAAI;EAE7C,IAAI,CAACD,eAAe,IAAI,CAACd,KAAK,EAAE;IAC9B,OAAO,KAAK;EACd;;EAEA;EACA,IAAID,cAAc,CAACC,KAAK,CAAC,EAAE;IACzB;IACAH,KAAK,CAACmB,QAAQ,CAAClB,MAAM,CAAC,CAAC,CAAC;IACxB,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMmB,cAAc,GAAGA,CAAA,KAAqB;EACjD,OAAOC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAIpB,KAAa,IAAW;EACjDkB,YAAY,CAACG,OAAO,CAAC,WAAW,EAAErB,KAAK,CAAC;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMsB,iBAAiB,GAAGA,CAAA,KAAY;EAC3CJ,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;AACtC,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAY;EACxC,MAAMxB,KAAK,GAAGiB,cAAc,CAAC,CAAC;EAC9B,IAAIjB,KAAK,IAAI,CAACD,cAAc,CAACC,KAAK,CAAC,EAAE;IACnC;IACA;IACA;EAAA,CACD,MAAM,IAAIA,KAAK,IAAID,cAAc,CAACC,KAAK,CAAC,EAAE;IACzC;IACAsB,iBAAiB,CAAC,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}