{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';const initialState={notifications:[],unreadCount:0};const notificationsSlice=createSlice({name:'notifications',initialState,reducers:{addNotification:(state,action)=>{state.notifications.unshift(action.payload);if(!action.payload.read){state.unreadCount+=1;}},markAsRead:(state,action)=>{const notification=state.notifications.find(n=>n.id===action.payload);if(notification&&!notification.read){notification.read=true;state.unreadCount-=1;}},markAllAsRead:state=>{state.notifications.forEach(notification=>{notification.read=true;});state.unreadCount=0;},clearNotifications:state=>{state.notifications=[];state.unreadCount=0;}}});export const{addNotification,markAsRead,markAllAsRead,clearNotifications}=notificationsSlice.actions;export default notificationsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","notifications","unreadCount","notificationsSlice","name","reducers","addNotification","state","action","unshift","payload","read","markAsRead","notification","find","n","id","markAllAsRead","forEach","clearNotifications","actions","reducer"],"sources":["c:/Users/owner/OneDrive - Process Steel/Documents/GitHub/bolt.diy/tasklink-sa-frontend/src/store/slices/notificationsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  title: string;\r\n  message: string;\r\n  read: boolean;\r\n  timestamp: string;\r\n}\r\n\r\ninterface NotificationsState {\r\n  notifications: Notification[];\r\n  unreadCount: number;\r\n}\r\n\r\nconst initialState: NotificationsState = {\r\n  notifications: [],\r\n  unreadCount: 0,\r\n};\r\n\r\nconst notificationsSlice = createSlice({\r\n  name: 'notifications',\r\n  initialState,\r\n  reducers: {\r\n    addNotification: (state, action: PayloadAction<Notification>) => {\r\n      state.notifications.unshift(action.payload);\r\n      if (!action.payload.read) {\r\n        state.unreadCount += 1;\r\n      }\r\n    },\r\n    markAsRead: (state, action: PayloadAction<string>) => {\r\n      const notification = state.notifications.find(n => n.id === action.payload);\r\n      if (notification && !notification.read) {\r\n        notification.read = true;\r\n        state.unreadCount -= 1;\r\n      }\r\n    },\r\n    markAllAsRead: (state) => {\r\n      state.notifications.forEach(notification => {\r\n        notification.read = true;\r\n      });\r\n      state.unreadCount = 0;\r\n    },\r\n    clearNotifications: (state) => {\r\n      state.notifications = [];\r\n      state.unreadCount = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addNotification, markAsRead, markAllAsRead, clearNotifications } = notificationsSlice.actions;\r\nexport default notificationsSlice.reducer;"],"mappings":"AAAA,OAASA,WAAW,KAAuB,kBAAkB,CAgB7D,KAAM,CAAAC,YAAgC,CAAG,CACvCC,aAAa,CAAE,EAAE,CACjBC,WAAW,CAAE,CACf,CAAC,CAED,KAAM,CAAAC,kBAAkB,CAAGJ,WAAW,CAAC,CACrCK,IAAI,CAAE,eAAe,CACrBJ,YAAY,CACZK,QAAQ,CAAE,CACRC,eAAe,CAAEA,CAACC,KAAK,CAAEC,MAAmC,GAAK,CAC/DD,KAAK,CAACN,aAAa,CAACQ,OAAO,CAACD,MAAM,CAACE,OAAO,CAAC,CAC3C,GAAI,CAACF,MAAM,CAACE,OAAO,CAACC,IAAI,CAAE,CACxBJ,KAAK,CAACL,WAAW,EAAI,CAAC,CACxB,CACF,CAAC,CACDU,UAAU,CAAEA,CAACL,KAAK,CAAEC,MAA6B,GAAK,CACpD,KAAM,CAAAK,YAAY,CAAGN,KAAK,CAACN,aAAa,CAACa,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAKR,MAAM,CAACE,OAAO,CAAC,CAC3E,GAAIG,YAAY,EAAI,CAACA,YAAY,CAACF,IAAI,CAAE,CACtCE,YAAY,CAACF,IAAI,CAAG,IAAI,CACxBJ,KAAK,CAACL,WAAW,EAAI,CAAC,CACxB,CACF,CAAC,CACDe,aAAa,CAAGV,KAAK,EAAK,CACxBA,KAAK,CAACN,aAAa,CAACiB,OAAO,CAACL,YAAY,EAAI,CAC1CA,YAAY,CAACF,IAAI,CAAG,IAAI,CAC1B,CAAC,CAAC,CACFJ,KAAK,CAACL,WAAW,CAAG,CAAC,CACvB,CAAC,CACDiB,kBAAkB,CAAGZ,KAAK,EAAK,CAC7BA,KAAK,CAACN,aAAa,CAAG,EAAE,CACxBM,KAAK,CAACL,WAAW,CAAG,CAAC,CACvB,CACF,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEI,eAAe,CAAEM,UAAU,CAAEK,aAAa,CAAEE,kBAAmB,CAAC,CAAGhB,kBAAkB,CAACiB,OAAO,CAC5G,cAAe,CAAAjB,kBAAkB,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}