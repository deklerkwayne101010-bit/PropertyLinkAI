// Prisma schema for TaskLink SA - Local Task and Odd Job Marketplace

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  phone            String?
  password         String
  firstName        String
  lastName         String
  profileImage     String?
  bio              String?
  location         String? // City/Province in South Africa
  coordinates      Json? // { lat: Float, lng: Float }
  skills           String[] // Array of skills user can offer
  rating           Float     @default(0)
  reviewCount      Int       @default(0)
  isVerified       Boolean   @default(false)
  verificationType String? // "email", "phone", "id"
  idNumber         String? // South African ID number for verification
  role             UserRole  @default(CLIENT) // User role in the system
  isWorker         Boolean   @default(false) // Can post jobs or work on jobs
  isClient         Boolean   @default(true) // Can post jobs
  isSuspended      Boolean   @default(false) // Admin suspended user
  suspensionReason String? // Reason for suspension
  suspendedAt      DateTime? // When user was suspended
  suspendedBy      String? // Admin who suspended the user
  lastLoginAt      DateTime? // Track last login for security
  loginAttempts    Int       @default(0) // Failed login attempts
  lockedAt         DateTime? // Account locked due to failed attempts
  completedJobs    Int       @default(0)
  totalEarned      Float     @default(0) // In ZAR
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  postedJobs              Job[]                    @relation("JobPoster")
  takenJobs               Job[]                    @relation("JobWorker")
  sentMessages            Message[]                @relation("MessageSender")
  receivedMessages        Message[]                @relation("MessageReceiver")
  reviewsGiven            Review[]                 @relation("ReviewAuthor")
  reviewsReceived         Review[]                 @relation("ReviewSubject")
  notifications           Notification[]
  clientPayments          Payment[]                @relation("PaymentClient")
  workerPayments          Payment[]                @relation("PaymentWorker")
  auditLogs               AuditLog[]
  reportedDisputes        Dispute[]                @relation("DisputeReporter")
  disputesAgainst         Dispute[]                @relation("DisputeReportedUser")
  assignedDisputes        Dispute[]                @relation("DisputeAssignedAdmin")
  applications            Application[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]

  @@map("users")
}

model Job {
  id             String      @id @default(cuid())
  title          String
  description    String
  category       String // "cleaning", "gardening", "tutoring", etc.
  subcategory    String?
  location       String // Where the job needs to be done
  coordinates    Json? // { lat: Float, lng: Float }
  budget         Float // In ZAR
  budgetType     String      @default("fixed") // "fixed", "hourly"
  estimatedHours Int? // For hourly jobs
  status         JobStatus   @default(DRAFT)
  priority       JobPriority @default(MEDIUM)
  completedAt    DateTime?
  expiresAt      DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Job requirements and preferences
  requirements    String[] // Required skills/certifications
  preferredSkills String[] // Preferred but not required skills
  equipmentNeeded String[] // Tools/equipment needed
  ageRequirement  String? // "18+", "21+", etc.
  genderPref      String? // "male", "female", "any"

  // Media
  images String[] // URLs of job images

  // Relations
  poster        User           @relation("JobPoster", fields: [posterId], references: [id])
  worker        User?          @relation("JobWorker", fields: [workerId], references: [id])
  applications  Application[]
  payments      Payment[]
  reviews       Review[]
  messages      Message[]
  notifications Notification[]
  disputes      Dispute[]

  // Foreign keys
  posterId String
  workerId String?

  @@map("jobs")
}

model Application {
  id           String            @id @default(cuid())
  message      String? // Cover message from applicant
  proposedRate Float? // Proposed rate in ZAR (can differ from budget)
  status       ApplicationStatus @default(PENDING)
  appliedAt    DateTime          @default(now())
  respondedAt  DateTime?

  // Relations
  job       Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicant User @relation(fields: [applicantId], references: [id])

  // Foreign keys
  jobId       String
  applicantId String

  @@unique([jobId, applicantId])
  @@map("applications")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float // In ZAR
  currency        String        @default("ZAR")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String? // "card", "eft", "paypal", etc.
  paymentIntentId String? // Stripe payment intent ID
  payfastId       String? // PayFast payment ID
  description     String?
  fee             Float         @default(0) // Platform fee
  netAmount       Float // Amount after fees
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  job    Job? @relation(fields: [jobId], references: [id])
  client User @relation("PaymentClient", fields: [clientId], references: [id])
  worker User @relation("PaymentWorker", fields: [workerId], references: [id])

  // Foreign keys
  jobId    String?
  clientId String
  workerId String

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5 stars
  comment   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  job      Job  @relation(fields: [jobId], references: [id])
  reviewer User @relation("ReviewAuthor", fields: [reviewerId], references: [id])
  reviewee User @relation("ReviewSubject", fields: [revieweeId], references: [id])

  // Foreign keys
  jobId      String
  reviewerId String // Who wrote the review
  revieweeId String // Who received the review

  @@map("reviews")
}

model Message {
  id          String      @id @default(cuid())
  content     String
  messageType MessageType @default(TEXT)
  isRead      Boolean     @default(false)
  readAt      DateTime?
  createdAt   DateTime    @default(now())

  // Relations
  sender   User @relation("MessageSender", fields: [senderId], references: [id])
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])
  job      Job? @relation(fields: [jobId], references: [id])

  // Foreign keys
  senderId   String
  receiverId String
  jobId      String? // Related job (optional for general messages)

  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  readAt    DateTime?
  actionUrl String? // URL to navigate to when clicked
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  job  Job? @relation(fields: [jobId], references: [id])

  // Foreign keys
  userId String
  jobId  String? // Related job

  @@map("notifications")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String // "CREATE", "UPDATE", "DELETE", "LOGIN", etc.
  entityType String // "User", "Job", "Payment", etc.
  entityId   String // ID of the affected entity
  oldValues  Json? // Previous state (for updates)
  newValues  Json? // New state (for updates)
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  // Foreign keys
  userId String? // Nullable for system actions

  @@map("audit_logs")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Dispute {
  id          String        @id @default(cuid())
  title       String
  description String
  status      DisputeStatus @default(OPEN)
  priority    JobPriority   @default(MEDIUM)
  category    String // "payment", "job_quality", "communication", etc.

  // Resolution
  resolution String? // Admin's resolution decision
  resolvedAt DateTime? // When dispute was resolved
  closedAt   DateTime? // When dispute was closed

  // Evidence and communication
  evidence   Json? // Array of evidence files/URLs
  adminNotes String? // Internal admin notes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reporter      User  @relation("DisputeReporter", fields: [reporterId], references: [id])
  reportedUser  User? @relation("DisputeReportedUser", fields: [reportedUserId], references: [id])
  job           Job?  @relation(fields: [jobId], references: [id])
  assignedAdmin User? @relation("DisputeAssignedAdmin", fields: [assignedAdminId], references: [id])

  // Foreign keys
  reporterId      String // User who reported the dispute
  reportedUserId  String? // User being reported (optional for general disputes)
  jobId           String? // Related job (optional)
  assignedAdminId String? // Admin handling the dispute

  @@map("disputes")
}

// Enums
enum UserRole {
  CLIENT
  WORKER
  ADMIN
}

enum JobStatus {
  DRAFT
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum NotificationType {
  JOB_POSTED
  APPLICATION_RECEIVED
  APPLICATION_ACCEPTED
  APPLICATION_REJECTED
  JOB_ASSIGNED
  JOB_COMPLETED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  MESSAGE_RECEIVED
  SYSTEM_ANNOUNCEMENT
}

enum DisputeStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  ESCALATED
  CLOSED
}

enum AdminActionType {
  USER_SUSPEND
  USER_UNSUSPEND
  USER_VERIFY
  USER_DELETE
  JOB_APPROVE
  JOB_REJECT
  JOB_DELETE
  PAYMENT_REFUND
  CONTENT_MODERATE
  DISPUTE_RESOLVE
  ANNOUNCEMENT_CREATE
  SYSTEM_CONFIG_UPDATE
}
